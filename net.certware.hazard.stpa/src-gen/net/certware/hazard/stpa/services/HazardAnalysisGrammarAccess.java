/*
* generated by Xtext
*/
package net.certware.hazard.stpa.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HazardAnalysisGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccidentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccidentsAccidentParserRuleCall_0_0 = (RuleCall)cAccidentsAssignment_0.eContents().get(0);
		private final Assignment cIndicentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndicentsIncidentParserRuleCall_1_0 = (RuleCall)cIndicentsAssignment_1.eContents().get(0);
		
		//Model:
		//	accidents+=Accident* indicents+=Incident*;
		public ParserRule getRule() { return rule; }

		//accidents+=Accident* indicents+=Incident*
		public Group getGroup() { return cGroup; }

		//accidents+=Accident*
		public Assignment getAccidentsAssignment_0() { return cAccidentsAssignment_0; }

		//Accident
		public RuleCall getAccidentsAccidentParserRuleCall_0_0() { return cAccidentsAccidentParserRuleCall_0_0; }

		//indicents+=Incident*
		public Assignment getIndicentsAssignment_1() { return cIndicentsAssignment_1; }

		//Incident
		public RuleCall getIndicentsIncidentParserRuleCall_1_0() { return cIndicentsIncidentParserRuleCall_1_0; }
	}

	public class AccidentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Accident");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccidentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRankingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRankingRankingParserRuleCall_3_0 = (RuleCall)cRankingAssignment_3.eContents().get(0);
		private final Assignment cHazardsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHazardsHazardParserRuleCall_4_0 = (RuleCall)cHazardsAssignment_4.eContents().get(0);
		private final Assignment cNotesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNotesNoteParserRuleCall_5_0 = (RuleCall)cNotesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Accident:
		//	"Accident" desc=STRING "{" ranking=Ranking hazards+=Hazard+ notes+=Note* "}";
		public ParserRule getRule() { return rule; }

		//"Accident" desc=STRING "{" ranking=Ranking hazards+=Hazard+ notes+=Note* "}"
		public Group getGroup() { return cGroup; }

		//"Accident"
		public Keyword getAccidentKeyword_0() { return cAccidentKeyword_0; }

		//desc=STRING
		public Assignment getDescAssignment_1() { return cDescAssignment_1; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_1_0() { return cDescSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ranking=Ranking
		public Assignment getRankingAssignment_3() { return cRankingAssignment_3; }

		//Ranking
		public RuleCall getRankingRankingParserRuleCall_3_0() { return cRankingRankingParserRuleCall_3_0; }

		//hazards+=Hazard+
		public Assignment getHazardsAssignment_4() { return cHazardsAssignment_4; }

		//Hazard
		public RuleCall getHazardsHazardParserRuleCall_4_0() { return cHazardsHazardParserRuleCall_4_0; }

		//notes+=Note*
		public Assignment getNotesAssignment_5() { return cNotesAssignment_5; }

		//Note
		public RuleCall getNotesNoteParserRuleCall_5_0() { return cNotesNoteParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class IncidentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Incident");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncidentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRankingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRankingRankingParserRuleCall_3_0 = (RuleCall)cRankingAssignment_3.eContents().get(0);
		private final Assignment cHazardsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHazardsHazardParserRuleCall_4_0 = (RuleCall)cHazardsAssignment_4.eContents().get(0);
		private final Assignment cNotesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNotesNoteParserRuleCall_5_0 = (RuleCall)cNotesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Incident:
		//	"Incident" desc=STRING "{" ranking=Ranking hazards+=Hazard+ notes+=Note* "}";
		public ParserRule getRule() { return rule; }

		//"Incident" desc=STRING "{" ranking=Ranking hazards+=Hazard+ notes+=Note* "}"
		public Group getGroup() { return cGroup; }

		//"Incident"
		public Keyword getIncidentKeyword_0() { return cIncidentKeyword_0; }

		//desc=STRING
		public Assignment getDescAssignment_1() { return cDescAssignment_1; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_1_0() { return cDescSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ranking=Ranking
		public Assignment getRankingAssignment_3() { return cRankingAssignment_3; }

		//Ranking
		public RuleCall getRankingRankingParserRuleCall_3_0() { return cRankingRankingParserRuleCall_3_0; }

		//hazards+=Hazard+
		public Assignment getHazardsAssignment_4() { return cHazardsAssignment_4; }

		//Hazard
		public RuleCall getHazardsHazardParserRuleCall_4_0() { return cHazardsHazardParserRuleCall_4_0; }

		//notes+=Note*
		public Assignment getNotesAssignment_5() { return cNotesAssignment_5; }

		//Note
		public RuleCall getNotesNoteParserRuleCall_5_0() { return cNotesNoteParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RankingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ranking");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSeverityKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPriorityKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Ranking:
		//	"Severity" ID | "Priority" ID;
		public ParserRule getRule() { return rule; }

		//"Severity" ID | "Priority" ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Severity" ID
		public Group getGroup_0() { return cGroup_0; }

		//"Severity"
		public Keyword getSeverityKeyword_0_0() { return cSeverityKeyword_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }

		//"Priority" ID
		public Group getGroup_1() { return cGroup_1; }

		//"Priority"
		public Keyword getPriorityKeyword_1_0() { return cPriorityKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class HazardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hazard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHazardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLevelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLevelHazardLevelParserRuleCall_3_0 = (RuleCall)cLevelAssignment_3.eContents().get(0);
		private final Assignment cRiskAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRiskRiskLevelParserRuleCall_4_0 = (RuleCall)cRiskAssignment_4.eContents().get(0);
		private final Assignment cConstraintsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_0 = (RuleCall)cConstraintsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Hazard:
		//	"Hazard" desc=STRING "{" level=HazardLevel risk=RiskLevel constraints+=Constraint+ "}";
		public ParserRule getRule() { return rule; }

		//"Hazard" desc=STRING "{" level=HazardLevel risk=RiskLevel constraints+=Constraint+ "}"
		public Group getGroup() { return cGroup; }

		//"Hazard"
		public Keyword getHazardKeyword_0() { return cHazardKeyword_0; }

		//desc=STRING
		public Assignment getDescAssignment_1() { return cDescAssignment_1; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_1_0() { return cDescSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//level=HazardLevel
		public Assignment getLevelAssignment_3() { return cLevelAssignment_3; }

		//HazardLevel
		public RuleCall getLevelHazardLevelParserRuleCall_3_0() { return cLevelHazardLevelParserRuleCall_3_0; }

		//risk=RiskLevel
		public Assignment getRiskAssignment_4() { return cRiskAssignment_4; }

		//RiskLevel
		public RuleCall getRiskRiskLevelParserRuleCall_4_0() { return cRiskRiskLevelParserRuleCall_4_0; }

		//constraints+=Constraint+
		public Assignment getConstraintsAssignment_5() { return cConstraintsAssignment_5; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_0() { return cConstraintsConstraintParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RiskLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RiskLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRiskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExposureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExposureHazardExposureParserRuleCall_2_0 = (RuleCall)cExposureAssignment_2.eContents().get(0);
		private final Assignment cLikelihoodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLikelihoodHazardAccidentLikelihoodParserRuleCall_3_0 = (RuleCall)cLikelihoodAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RiskLevel:
		//	"Risk" "{" exposure=HazardExposure likelihood=HazardAccidentLikelihood "}";
		public ParserRule getRule() { return rule; }

		//"Risk" "{" exposure=HazardExposure likelihood=HazardAccidentLikelihood "}"
		public Group getGroup() { return cGroup; }

		//"Risk"
		public Keyword getRiskKeyword_0() { return cRiskKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//exposure=HazardExposure
		public Assignment getExposureAssignment_2() { return cExposureAssignment_2; }

		//HazardExposure
		public RuleCall getExposureHazardExposureParserRuleCall_2_0() { return cExposureHazardExposureParserRuleCall_2_0; }

		//likelihood=HazardAccidentLikelihood
		public Assignment getLikelihoodAssignment_3() { return cLikelihoodAssignment_3; }

		//HazardAccidentLikelihood
		public RuleCall getLikelihoodHazardAccidentLikelihoodParserRuleCall_3_0() { return cLikelihoodHazardAccidentLikelihoodParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class HazardLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HazardLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeverityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSeverityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSeverityHazardSeverityParserRuleCall_1_0 = (RuleCall)cSeverityAssignment_1.eContents().get(0);
		private final Keyword cLikelihoodKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLikelihoodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLikelihoodHazardLikelihoodParserRuleCall_3_0 = (RuleCall)cLikelihoodAssignment_3.eContents().get(0);
		
		//HazardLevel:
		//	"Severity" severity=HazardSeverity "Likelihood" likelihood=HazardLikelihood;
		public ParserRule getRule() { return rule; }

		//"Severity" severity=HazardSeverity "Likelihood" likelihood=HazardLikelihood
		public Group getGroup() { return cGroup; }

		//"Severity"
		public Keyword getSeverityKeyword_0() { return cSeverityKeyword_0; }

		//severity=HazardSeverity
		public Assignment getSeverityAssignment_1() { return cSeverityAssignment_1; }

		//HazardSeverity
		public RuleCall getSeverityHazardSeverityParserRuleCall_1_0() { return cSeverityHazardSeverityParserRuleCall_1_0; }

		//"Likelihood"
		public Keyword getLikelihoodKeyword_2() { return cLikelihoodKeyword_2; }

		//likelihood=HazardLikelihood
		public Assignment getLikelihoodAssignment_3() { return cLikelihoodAssignment_3; }

		//HazardLikelihood
		public RuleCall getLikelihoodHazardLikelihoodParserRuleCall_3_0() { return cLikelihoodHazardLikelihoodParserRuleCall_3_0; }
	}

	public class HazardExposureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HazardExposure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExposureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExposureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExposureSTRINGTerminalRuleCall_1_0 = (RuleCall)cExposureAssignment_1.eContents().get(0);
		
		//HazardExposure:
		//	"Exposure" exposure=STRING;
		public ParserRule getRule() { return rule; }

		//"Exposure" exposure=STRING
		public Group getGroup() { return cGroup; }

		//"Exposure"
		public Keyword getExposureKeyword_0() { return cExposureKeyword_0; }

		//exposure=STRING
		public Assignment getExposureAssignment_1() { return cExposureAssignment_1; }

		//STRING
		public RuleCall getExposureSTRINGTerminalRuleCall_1_0() { return cExposureSTRINGTerminalRuleCall_1_0; }
	}

	public class HazardAccidentLikelihoodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HazardAccidentLikelihood");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLikelihoodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLikelihoodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLikelihoodSTRINGTerminalRuleCall_1_0 = (RuleCall)cLikelihoodAssignment_1.eContents().get(0);
		
		//HazardAccidentLikelihood:
		//	"Likelihood" likelihood=STRING;
		public ParserRule getRule() { return rule; }

		//"Likelihood" likelihood=STRING
		public Group getGroup() { return cGroup; }

		//"Likelihood"
		public Keyword getLikelihoodKeyword_0() { return cLikelihoodKeyword_0; }

		//likelihood=STRING
		public Assignment getLikelihoodAssignment_1() { return cLikelihoodAssignment_1; }

		//STRING
		public RuleCall getLikelihoodSTRINGTerminalRuleCall_1_0() { return cLikelihoodSTRINGTerminalRuleCall_1_0; }
	}

	public class HazardSeverityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HazardSeverity");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//HazardSeverity:
		//	value=ID;
		public ParserRule getRule() { return rule; }

		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}

	public class HazardLikelihoodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HazardLikelihood");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//HazardLikelihood:
		//	value=ID;
		public ParserRule getRule() { return rule; }

		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintSTRINGTerminalRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRequirementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequirementsRequirementParserRuleCall_3_0 = (RuleCall)cRequirementsAssignment_3.eContents().get(0);
		private final Assignment cScenariosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScenariosScenarioParserRuleCall_4_0 = (RuleCall)cScenariosAssignment_4.eContents().get(0);
		private final Assignment cControlsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cControlsControlParserRuleCall_5_0 = (RuleCall)cControlsAssignment_5.eContents().get(0);
		private final Assignment cNotesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNotesNoteParserRuleCall_6_0 = (RuleCall)cNotesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Constraint:
		//	"Constraint" constraint=STRING "{" requirements+=Requirement* scenarios+=Scenario* controls+=Control* notes+=Note*
		//	"}";
		public ParserRule getRule() { return rule; }

		//"Constraint" constraint=STRING "{" requirements+=Requirement* scenarios+=Scenario* controls+=Control* notes+=Note* "}"
		public Group getGroup() { return cGroup; }

		//"Constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//constraint=STRING
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }

		//STRING
		public RuleCall getConstraintSTRINGTerminalRuleCall_1_0() { return cConstraintSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//requirements+=Requirement*
		public Assignment getRequirementsAssignment_3() { return cRequirementsAssignment_3; }

		//Requirement
		public RuleCall getRequirementsRequirementParserRuleCall_3_0() { return cRequirementsRequirementParserRuleCall_3_0; }

		//scenarios+=Scenario*
		public Assignment getScenariosAssignment_4() { return cScenariosAssignment_4; }

		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_4_0() { return cScenariosScenarioParserRuleCall_4_0; }

		//controls+=Control*
		public Assignment getControlsAssignment_5() { return cControlsAssignment_5; }

		//Control
		public RuleCall getControlsControlParserRuleCall_5_0() { return cControlsControlParserRuleCall_5_0; }

		//notes+=Note*
		public Assignment getNotesAssignment_6() { return cNotesAssignment_6; }

		//Note
		public RuleCall getNotesNoteParserRuleCall_6_0() { return cNotesNoteParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequirementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequirementSTRINGTerminalRuleCall_1_0 = (RuleCall)cRequirementAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDesignsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDesignsDesignParserRuleCall_3_0 = (RuleCall)cDesignsAssignment_3.eContents().get(0);
		private final Assignment cNotesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNotesNoteParserRuleCall_4_0 = (RuleCall)cNotesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Requirement:
		//	"Requirement" requirement=STRING "{" designs+=Design* notes+=Note* "}";
		public ParserRule getRule() { return rule; }

		//"Requirement" requirement=STRING "{" designs+=Design* notes+=Note* "}"
		public Group getGroup() { return cGroup; }

		//"Requirement"
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }

		//requirement=STRING
		public Assignment getRequirementAssignment_1() { return cRequirementAssignment_1; }

		//STRING
		public RuleCall getRequirementSTRINGTerminalRuleCall_1_0() { return cRequirementSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//designs+=Design*
		public Assignment getDesignsAssignment_3() { return cDesignsAssignment_3; }

		//Design
		public RuleCall getDesignsDesignParserRuleCall_3_0() { return cDesignsDesignParserRuleCall_3_0; }

		//notes+=Note*
		public Assignment getNotesAssignment_4() { return cNotesAssignment_4; }

		//Note
		public RuleCall getNotesNoteParserRuleCall_4_0() { return cNotesNoteParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DesignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Design");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAllocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAllocationSTRINGTerminalRuleCall_1_0 = (RuleCall)cAllocationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAnalysisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnalysisAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnalysisSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cAnalysisAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRationaleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRationaleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRationaleSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cRationaleAssignment_3_1.eContents().get(0);
		
		//Design:
		//	"Allocation" allocation=STRING ("Analysis" analysis=STRING)? ("Rationale" rationale=STRING)?;
		public ParserRule getRule() { return rule; }

		//"Allocation" allocation=STRING ("Analysis" analysis=STRING)? ("Rationale" rationale=STRING)?
		public Group getGroup() { return cGroup; }

		//"Allocation"
		public Keyword getAllocationKeyword_0() { return cAllocationKeyword_0; }

		//allocation=STRING
		public Assignment getAllocationAssignment_1() { return cAllocationAssignment_1; }

		//STRING
		public RuleCall getAllocationSTRINGTerminalRuleCall_1_0() { return cAllocationSTRINGTerminalRuleCall_1_0; }

		//("Analysis" analysis=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"Analysis"
		public Keyword getAnalysisKeyword_2_0() { return cAnalysisKeyword_2_0; }

		//analysis=STRING
		public Assignment getAnalysisAssignment_2_1() { return cAnalysisAssignment_2_1; }

		//STRING
		public RuleCall getAnalysisSTRINGTerminalRuleCall_2_1_0() { return cAnalysisSTRINGTerminalRuleCall_2_1_0; }

		//("Rationale" rationale=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"Rationale"
		public Keyword getRationaleKeyword_3_0() { return cRationaleKeyword_3_0; }

		//rationale=STRING
		public Assignment getRationaleAssignment_3_1() { return cRationaleAssignment_3_1; }

		//STRING
		public RuleCall getRationaleSTRINGTerminalRuleCall_3_1_0() { return cRationaleSTRINGTerminalRuleCall_3_1_0; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScenarioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScenarioSTRINGTerminalRuleCall_1_0 = (RuleCall)cScenarioAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Scenario:
		//	"Scenario" scenario=STRING ";";
		public ParserRule getRule() { return rule; }

		//"Scenario" scenario=STRING ";"
		public Group getGroup() { return cGroup; }

		//"Scenario"
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }

		//scenario=STRING
		public Assignment getScenarioAssignment_1() { return cScenarioAssignment_1; }

		//STRING
		public RuleCall getScenarioSTRINGTerminalRuleCall_1_0() { return cScenarioSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Control");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cControlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cControlSTRINGTerminalRuleCall_1_0 = (RuleCall)cControlAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Control:
		//	"Control" control=STRING ";";
		public ParserRule getRule() { return rule; }

		//"Control" control=STRING ";"
		public Group getGroup() { return cGroup; }

		//"Control"
		public Keyword getControlKeyword_0() { return cControlKeyword_0; }

		//control=STRING
		public Assignment getControlAssignment_1() { return cControlAssignment_1; }

		//STRING
		public RuleCall getControlSTRINGTerminalRuleCall_1_0() { return cControlSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteSTRINGTerminalRuleCall_1_0 = (RuleCall)cNoteAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Note:
		//	"Note" note=STRING ";";
		public ParserRule getRule() { return rule; }

		//"Note" note=STRING ";"
		public Group getGroup() { return cGroup; }

		//"Note"
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }

		//note=STRING
		public Assignment getNoteAssignment_1() { return cNoteAssignment_1; }

		//STRING
		public RuleCall getNoteSTRINGTerminalRuleCall_1_0() { return cNoteSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	private ModelElements pModel;
	private AccidentElements pAccident;
	private IncidentElements pIncident;
	private RankingElements pRanking;
	private HazardElements pHazard;
	private RiskLevelElements pRiskLevel;
	private HazardLevelElements pHazardLevel;
	private HazardExposureElements pHazardExposure;
	private HazardAccidentLikelihoodElements pHazardAccidentLikelihood;
	private HazardSeverityElements pHazardSeverity;
	private HazardLikelihoodElements pHazardLikelihood;
	private ConstraintElements pConstraint;
	private RequirementElements pRequirement;
	private DesignElements pDesign;
	private ScenarioElements pScenario;
	private ControlElements pControl;
	private NoteElements pNote;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public HazardAnalysisGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.certware.hazard.stpa.HazardAnalysis".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	accidents+=Accident* indicents+=Incident*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Accident:
	//	"Accident" desc=STRING "{" ranking=Ranking hazards+=Hazard+ notes+=Note* "}";
	public AccidentElements getAccidentAccess() {
		return (pAccident != null) ? pAccident : (pAccident = new AccidentElements());
	}
	
	public ParserRule getAccidentRule() {
		return getAccidentAccess().getRule();
	}

	//Incident:
	//	"Incident" desc=STRING "{" ranking=Ranking hazards+=Hazard+ notes+=Note* "}";
	public IncidentElements getIncidentAccess() {
		return (pIncident != null) ? pIncident : (pIncident = new IncidentElements());
	}
	
	public ParserRule getIncidentRule() {
		return getIncidentAccess().getRule();
	}

	//Ranking:
	//	"Severity" ID | "Priority" ID;
	public RankingElements getRankingAccess() {
		return (pRanking != null) ? pRanking : (pRanking = new RankingElements());
	}
	
	public ParserRule getRankingRule() {
		return getRankingAccess().getRule();
	}

	//Hazard:
	//	"Hazard" desc=STRING "{" level=HazardLevel risk=RiskLevel constraints+=Constraint+ "}";
	public HazardElements getHazardAccess() {
		return (pHazard != null) ? pHazard : (pHazard = new HazardElements());
	}
	
	public ParserRule getHazardRule() {
		return getHazardAccess().getRule();
	}

	//RiskLevel:
	//	"Risk" "{" exposure=HazardExposure likelihood=HazardAccidentLikelihood "}";
	public RiskLevelElements getRiskLevelAccess() {
		return (pRiskLevel != null) ? pRiskLevel : (pRiskLevel = new RiskLevelElements());
	}
	
	public ParserRule getRiskLevelRule() {
		return getRiskLevelAccess().getRule();
	}

	//HazardLevel:
	//	"Severity" severity=HazardSeverity "Likelihood" likelihood=HazardLikelihood;
	public HazardLevelElements getHazardLevelAccess() {
		return (pHazardLevel != null) ? pHazardLevel : (pHazardLevel = new HazardLevelElements());
	}
	
	public ParserRule getHazardLevelRule() {
		return getHazardLevelAccess().getRule();
	}

	//HazardExposure:
	//	"Exposure" exposure=STRING;
	public HazardExposureElements getHazardExposureAccess() {
		return (pHazardExposure != null) ? pHazardExposure : (pHazardExposure = new HazardExposureElements());
	}
	
	public ParserRule getHazardExposureRule() {
		return getHazardExposureAccess().getRule();
	}

	//HazardAccidentLikelihood:
	//	"Likelihood" likelihood=STRING;
	public HazardAccidentLikelihoodElements getHazardAccidentLikelihoodAccess() {
		return (pHazardAccidentLikelihood != null) ? pHazardAccidentLikelihood : (pHazardAccidentLikelihood = new HazardAccidentLikelihoodElements());
	}
	
	public ParserRule getHazardAccidentLikelihoodRule() {
		return getHazardAccidentLikelihoodAccess().getRule();
	}

	//HazardSeverity:
	//	value=ID;
	public HazardSeverityElements getHazardSeverityAccess() {
		return (pHazardSeverity != null) ? pHazardSeverity : (pHazardSeverity = new HazardSeverityElements());
	}
	
	public ParserRule getHazardSeverityRule() {
		return getHazardSeverityAccess().getRule();
	}

	//HazardLikelihood:
	//	value=ID;
	public HazardLikelihoodElements getHazardLikelihoodAccess() {
		return (pHazardLikelihood != null) ? pHazardLikelihood : (pHazardLikelihood = new HazardLikelihoodElements());
	}
	
	public ParserRule getHazardLikelihoodRule() {
		return getHazardLikelihoodAccess().getRule();
	}

	//Constraint:
	//	"Constraint" constraint=STRING "{" requirements+=Requirement* scenarios+=Scenario* controls+=Control* notes+=Note*
	//	"}";
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//Requirement:
	//	"Requirement" requirement=STRING "{" designs+=Design* notes+=Note* "}";
	public RequirementElements getRequirementAccess() {
		return (pRequirement != null) ? pRequirement : (pRequirement = new RequirementElements());
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}

	//Design:
	//	"Allocation" allocation=STRING ("Analysis" analysis=STRING)? ("Rationale" rationale=STRING)?;
	public DesignElements getDesignAccess() {
		return (pDesign != null) ? pDesign : (pDesign = new DesignElements());
	}
	
	public ParserRule getDesignRule() {
		return getDesignAccess().getRule();
	}

	//Scenario:
	//	"Scenario" scenario=STRING ";";
	public ScenarioElements getScenarioAccess() {
		return (pScenario != null) ? pScenario : (pScenario = new ScenarioElements());
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//Control:
	//	"Control" control=STRING ";";
	public ControlElements getControlAccess() {
		return (pControl != null) ? pControl : (pControl = new ControlElements());
	}
	
	public ParserRule getControlRule() {
		return getControlAccess().getRule();
	}

	//Note:
	//	"Note" note=STRING ";";
	public NoteElements getNoteAccess() {
		return (pNote != null) ? pNote : (pNote = new NoteElements());
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
