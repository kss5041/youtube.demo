/*
* NOT generated by Xtext
*/
package net.certware.intent.ui.labeling

import com.google.inject.Inject
import net.certware.intent.intentSpecification.Decomposition
import net.certware.intent.intentSpecification.DocItem
import net.certware.intent.intentSpecification.Document
import net.certware.intent.intentSpecification.Intent
import net.certware.intent.intentSpecification.ListItem
import net.certware.intent.intentSpecification.ModelItem
import net.certware.intent.intentSpecification.Refinement
import net.certware.intent.intentSpecification.Specification
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class IntentSpecificationLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def image(Refinement e) {
		'obj16/refinement.gif'
	}
	
	def image(Intent e) {
		'obj16/intent.gif'
	}
	
	def image(Specification e) {
		'obj16/specification.gif'
	}
	
	def image(Decomposition e) {
		'obj16/decomposition.gif'
	}
	
	def image(Document e) {
		'obj16/document.gif'
	}
	
	def image(ModelItem e) {
		'obj16/modelitem.gif'
	}
	
	def image(ListItem e) {
		'obj16/listitem.gif'
	}
	
	/*
	 * text responses
	 */
	def text(Intent e) {
		var type = e.type
		var typeName = type.typeName
		// 	typeName=('basic' | 'purpose' | 'principles' | 'models' | 'design' | 'implementation' | 'operation')
		if ('basic'.equals(typeName)) {
			return 'Basic' + ' ' + e.name
		}
		if ('purpose'.equals(typeName)) {
			return 'Purpose' + ' ' + e.name
		}
		if ('principles'.equals(typeName)) {
			return 'Principles' + ' ' + e.name
		}
		if ('models'.equals(typeName)) {
			return 'Models' + ' ' + e.name
		}
		if ('design'.equals(typeName)) {
			return 'Design' + ' ' + e.name
		}
		if ('implementation'.equals(typeName)) {
			return 'Implementation' + ' ' + e.name
		}
		if ('operation'.equals(typeName)) {
			return 'Operation' + ' ' + e.name
		}
		'Intent' + ' ' + e.name
	}
	
	def text(Refinement e) {
		'Refinement' + ' ' + e.name
	}
	
	def text(Decomposition e) {
		var type = e.type
		var typeName = type.typeName
		if ( 'environment'.equals(typeName)) {
			return 'Environment' + ' ' + e.name
		}
		if ('operator'.equals(typeName)) {
			return 'Operator' + ' ' + e.name
		}
		if ('system'.equals(typeName)) {
			return 'System' + ' ' + e.name
		}
		if ('verification'.equals(typeName)) {
			return 'V&V' + ' ' + e.name
		}
		'Decomposition' + ' ' + e.name
	}

	def text(Document e) {
		'Document' // has no name or ID
	}
	
	def text(DocItem e) {
		var type = e.type
		var typeName = type.typeName
		if ('condition'.equals(typeName)) {
			return 'Condition' + ' ' + e.name
		}
		if ('figure'.equals(typeName)) {
			return 'Figure' + ' ' + e.name
		}
		if ('break'.equals(typeName)) {
			return 'Break'
		}
		if ('model'.equals(typeName)) {
			return 'Model' + ' ' + e.name
		}
		if ('paragraph'.equals(typeName)) {
			return 'Paragraph' + ' ' + e.name
		}
		if ('section'.equals(typeName)) {
			return 'Section' + ' ' + e.name
		}
		if ('table'.equals(typeName)) {
			return 'Table' + ' ' + e.name
		}

		'Item' + ' ' + e.name		
	}
	
	
	def text(ModelItem e) {
		var type = e.type
		var typeName = type.typeName
		
		if ('output'.equals(typeName)){
			return 'Output' + ' ' + e.name
		}
		if ('mode'.equals(typeName)){
			return 'Mode' + ' ' + e.name
		}
		if ('state'.equals(typeName)) {
			return 'State' + ' ' + e.name
		}
		if ('macro'.equals(typeName)) {
			return 'Macro' + ' ' + e.name
		}
		if ('function'.equals(typeName)) {
			return 'Function' + ' ' + e.name
		}
		if ('input'.equals(typeName)) {
			return 'Input' + ' ' + e.name
		}
		'Model' + ' ' + e.name
	}
	
	def text(ListItem e) {
		var type = e.type
		
		if ('hazard'.equals(type.typeName)) {
			return 'Hazard' + ' ' + e.name
		}
		if ('requirement'.equals(type.typeName)) {
			return 'Requirement' + ' ' + e.name
		}
		if ('goal'.equals(type.typeName)) {
			return 'Goal' + ' ' + e.name
		} 
		if ('constraint'.equals(type.typeName)) {
			return 'Constraint' + ' ' + e.name			
		}
		'List' + ' ' + e.name
	}
}
